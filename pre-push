#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).
set -e

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
    # Ignore deleting branches, new branches and development branches
    echo "local_sha: $local_sha"
    echo >&2 "local_ref: $local_ref"
    echo >&2 "remote_sha: $remote_sha"
    echo >&2 "remote_ref: $remote_ref"
    commits=$(git rev-list \
                --grep='^ReviewID: \d+' \
                --grep='^VerificationTag: [0-9a-fA-F]+' \
                --all-match --invert-grep --perl-regexp \
                "$remote_sha..$local_sha")

    echo >&2 "Commits: ${commits}"

    if [ "$local_sha" = $z40 ] \
    || [ "$remote_sha" = $z40 ] \
    || [ "$remote_ref" = refs/heads/*_dev_branch ]
    then
        continue
    fi

    # But do count in master, development and feature branches
    if [ "$remote_ref" = refs/heads/master ] \
    || [ "$remote_ref" = refs/heads/development ] \
    || [ "$remote_ref" = refs/heads/*_branch ]
    then
        echo "Checking for mandated information..."
        # Check for WIP commit
        commits=$(git rev-list --grep='^ReviewID: \d+' --grep='^VerificationTag: [0-9a-fA-F]+' --all-match --invert-grep --perl-regexp "$remote_sha..$local_sha")
        echo >&2 "Commits = 
                    $commits"
        # if [ -n "$commits" ]
        # then
        #     echo >&2 "Found commit(s) lacking ReviewID or VerificationTag:"
        #     echo >&2 "$commits"
        #     exit 1
        # else
            GREP_UTIL=ggrep
            review_id=git log --format=%B -n 1 $local_sha | ${GREP_UTIL} -oP '(?<=^ReviewID: )\d+'
            review_status=$(curl -s "https://review.lab.nbttech.com/api/review-requests/${review_id}/" | jq '.review_request.issue_open_count, .review_request.ship_it_count')
            echo >&2 "Review Status = $review_status"
        # fi
        echo "Done."
    fi
done

exit 0
